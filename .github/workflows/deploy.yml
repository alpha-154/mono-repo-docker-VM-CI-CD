# .github/workflows/deploy.yml

name: Build and Deploy to EC2

on:
  push:
    branches:
      - main # Or your default branch

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  BACKEND_IMAGE_NAME: mono-repo-backend
  FRONTEND_IMAGE_NAME: mono-repo-frontend
  WS_IMAGE_NAME: mono-repo-ws

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and push Backend image
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.backend
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest,${{ env.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}

      # Build and push Frontend image
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.frontend
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest,${{ env.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}

      # Build and push WebSocket image
      - name: Build and push ws image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.ws
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.WS_IMAGE_NAME }}:latest,${{ env.DOCKERHUB_USERNAME }}/${{ env.WS_IMAGE_NAME }}:${{ github.sha }}

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push # This job will only run if the build-and-push job succeeds

    steps:
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # Navigate to the repository directory
            cd /home/${{ secrets.EC2_USERNAME }}/mono-repo-docker-VM-CI-CD

            # Pull the latest code from the main branch
            git pull origin main

            # Set the new image tags as environment variables
            # These will be picked up by docker-compose.prod.yml
            export DOCKER_IMAGE_BACKEND=${{ env.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}
            export DOCKER_IMAGE_FRONTEND=${{ env.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
            export DOCKER_IMAGE_WS=${{ env.DOCKERHUB_USERNAME }}/${{ env.WS_IMAGE_NAME }}:${{ github.sha }}

            # Run the migration command using a temporary container
            # This is a robust way to handle database migrations in deployment
            docker-compose -f docker-compose.prod.yml run --rm backend bun run db:push

            # Pull the new images and restart the services
            # --no-build tells Compose to use the pre-built images from Docker Hub
            docker-compose -f docker-compose.prod.yml up -d --no-build
